"""
八位二进制数据，首位0表示正数，1表示负数
正数的原码、反码、补码一致
负数的原码首位为符号位1，反码为首位不变其他按位取反，补码为末位加一
移码位2^(n-1) 相加表示偏移量 补码的符号位取反便得到移码
"""
"""
按位运算，两运算数的补码逐位运算，得出补码后转成原码即为所得值
与：1&1=1，1&0=0，0&0=0，0&1=0
或：1|1=1, 1|0=1, 0|0=0, 0|1=1
异或：1^1=0, 1^0=1, 0^0=0, 0^1=1

"""
"""
~按位翻转（单目运算）：将二进制数+1之后乘以-1,x的按位翻转是-(x+1) 3的二进制是11, -(11+1)=-100B=-4D
<<左移动运算符：X<<N 将一个数字X所对应的二进制数向左移动N位.11向左移动两位变为1100,即12 
>>右移动运算符：X>>N 将一个数字X所对应的二进制数向左移动N位.11向右移动两位变为0
"""
"""
下表中变量 a 为 60，b 为 13，二进制格式如下：
a = 0011 1100
b = 0000 1101
-----------------
a&b = 0000 1100
a|b = 0011 1101
a^b = 0011 0001
~a  = 1100 0011
"""

print(bin(45))

# 补码
def bindigits(n, bits):
    s = bin(n & int("1"*bits, 2))[2:]
    return ("{0:0>%s}" % (bits)).format(s)


print(bindigits(-31337, 24))
